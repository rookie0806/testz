{"ast":null,"code":"const SET_DATA = \"SET_DATA\";\nconst SET_TEXT = \"SET_TEXT\";\n\nfunction setDATA(data) {\n  return {\n    type: SET_DATA,\n    data\n  };\n}\n\nfunction setTEXT(text) {\n  return {\n    type: SET_TEXT,\n    text\n  };\n} // API Actions\n\n\nfunction getDATA() {\n  return (dispatch, getState) => {\n    fetch(\"/crawl/getData/\", {}).then(response => {\n      return response.json();\n    }).then(json => {\n      dispatch(setDATA(json));\n    }).catch(err => console.log(err));\n  };\n}\n\nfunction getTEXT() {\n  return (dispatch, getState) => {\n    fetch(\"/crawl/getToWrite/\", {}).then(response => {\n      return response.json();\n    }).then(json => {\n      dispatch(setTEXT(json));\n    }).catch(err => console.log(err));\n  };\n} // Initial State\n\n\nconst initialState = {}; // Reducer\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_DATA:\n      return applySetDATA(state, action);\n\n    case SET_TEXT:\n      return applySetTEXT(state, action);\n\n    default:\n      return state;\n  }\n} // Reducer Functions\n\n\nfunction applySetDATA(state, action) {\n  const {\n    data\n  } = action;\n  return { ...state,\n    data\n  };\n}\n\nfunction applySetTEXT(state, action) {\n  const {\n    text\n  } = action;\n  return { ...state,\n    text\n  };\n}\n\nconst actionCreators = {\n  getDATA,\n  getTEXT\n};\nexport { actionCreators }; // Export reducer by default\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/devgu/sohee/sohee/frontend/src/redux/modules/data.js"],"names":["SET_DATA","SET_TEXT","setDATA","data","type","setTEXT","text","getDATA","dispatch","getState","fetch","then","response","json","catch","err","console","log","getTEXT","initialState","reducer","state","action","applySetDATA","applySetTEXT","actionCreators"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;;AACA,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,SAAO;AACLC,IAAAA,IAAI,EAAEJ,QADD;AAELG,IAAAA;AAFK,GAAP;AAID;;AACD,SAASE,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,SAAO;AACLF,IAAAA,IAAI,EAAEH,QADD;AAELK,IAAAA;AAFK,GAAP;AAID,C,CACD;;;AACA,SAASC,OAAT,GAAmB;AACjB,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7BC,IAAAA,KAAK,CAAC,iBAAD,EAAoB,EAApB,CAAL,CAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAJH,EAKGF,IALH,CAKQE,IAAI,IAAI;AAEZL,MAAAA,QAAQ,CAACN,OAAO,CAACW,IAAD,CAAR,CAAR;AACD,KARH,EASGC,KATH,CASSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAThB;AAUD,GAXD;AAYD;;AACD,SAASG,OAAT,GAAmB;AACjB,SAAO,CAACV,QAAD,EAAWC,QAAX,KAAwB;AAC7BC,IAAAA,KAAK,CAAC,oBAAD,EAAuB,EAAvB,CAAL,CAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAJH,EAKGF,IALH,CAKQE,IAAI,IAAI;AAEZL,MAAAA,QAAQ,CAACH,OAAO,CAACQ,IAAD,CAAR,CAAR;AACD,KARH,EASGC,KATH,CASSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAThB;AAUD,GAXD;AAYD,C,CACD;;;AAEA,MAAMI,YAAY,GAAG,EAArB,C,CAEA;;AAEA,SAASC,OAAT,CAAiBC,KAAK,GAAGF,YAAzB,EAAuCG,MAAvC,EAA+C;AAC7C,UAAQA,MAAM,CAAClB,IAAf;AACE,SAAKJ,QAAL;AACE,aAAOuB,YAAY,CAACF,KAAD,EAAQC,MAAR,CAAnB;;AACF,SAAKrB,QAAL;AACI,aAAOuB,YAAY,CAACH,KAAD,EAAQC,MAAR,CAAnB;;AACJ;AACE,aAAOD,KAAP;AANJ;AAQD,C,CACD;;;AAEA,SAASE,YAAT,CAAsBF,KAAtB,EAA6BC,MAA7B,EAAqC;AACnC,QAAM;AAAEnB,IAAAA;AAAF,MAAWmB,MAAjB;AACA,SAAO,EACL,GAAGD,KADE;AAELlB,IAAAA;AAFK,GAAP;AAID;;AACD,SAASqB,YAAT,CAAsBH,KAAtB,EAA6BC,MAA7B,EAAqC;AACnC,QAAM;AAAEhB,IAAAA;AAAF,MAAWgB,MAAjB;AACA,SAAO,EACL,GAAGD,KADE;AAELf,IAAAA;AAFK,GAAP;AAID;;AACD,MAAMmB,cAAc,GAAG;AACrBlB,EAAAA,OADqB;AAErBW,EAAAA;AAFqB,CAAvB;AAKA,SAASO,cAAT,G,CAEA;;AAEA,eAAeL,OAAf","sourcesContent":["const SET_DATA = \"SET_DATA\";\r\nconst SET_TEXT = \"SET_TEXT\";\r\nfunction setDATA(data) {\r\n  return {\r\n    type: SET_DATA,\r\n    data\r\n  };\r\n}\r\nfunction setTEXT(text) {\r\n  return {\r\n    type: SET_TEXT,\r\n    text\r\n  };\r\n}\r\n// API Actions\r\nfunction getDATA() {\r\n  return (dispatch, getState) => {\r\n    fetch(\"/crawl/getData/\", {\r\n    })\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(json => {\r\n        \r\n        dispatch(setDATA(json));\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n}\r\nfunction getTEXT() {\r\n  return (dispatch, getState) => {\r\n    fetch(\"/crawl/getToWrite/\", {\r\n    })\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(json => {\r\n        \r\n        dispatch(setTEXT(json));\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n}\r\n// Initial State\r\n\r\nconst initialState = {};\r\n\r\n// Reducer\r\n\r\nfunction reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_DATA:\r\n      return applySetDATA(state, action);\r\n    case SET_TEXT:\r\n        return applySetTEXT(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n// Reducer Functions\r\n\r\nfunction applySetDATA(state, action) {\r\n  const { data } = action;\r\n  return {\r\n    ...state,\r\n    data\r\n  };\r\n}\r\nfunction applySetTEXT(state, action) {\r\n  const { text } = action;\r\n  return {\r\n    ...state,\r\n    text\r\n  };\r\n}\r\nconst actionCreators = {\r\n  getDATA,\r\n  getTEXT\r\n};\r\n\r\nexport { actionCreators };\r\n\r\n// Export reducer by default\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}