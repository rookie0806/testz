{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\devgu\\\\sohee\\\\sohee\\\\frontend\\\\src\\\\components\\\\Setting\\\\container.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Setting from \"./presenter\";\nimport test1 from \"./test_1.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Container extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      loading2: true,\n      idx: 1,\n      page: [1],\n      maxpage: 0\n    };\n\n    this.componentWillReceiveProps = nextProps => {\n      const {\n        data\n      } = this.props;\n      const {\n        postXY\n      } = this.props;\n\n      if (nextProps.data && nextProps.text) {\n        console.log(nextProps.data);\n        this.draw(nextProps.data, nextProps.text);\n      }\n    };\n  }\n\n  draw(data, text) {\n    const {\n      postXY\n    } = this.props;\n    var canvas = document.getElementsByTagName('canvas')[0];\n    canvas.width = document.body.clientWidth;\n    canvas.height = window.innerHeight;\n    var image = new Array();\n\n    for (var i = 0; i < data.length; i++) {\n      image[i] = new Image();\n      image[i].src = data[i][\"image\"];\n    }\n\n    console.log(image);\n    var timerId = \"\";\n    var first = true;\n    var ctx = canvas.getContext('2d');\n    trackTransforms(ctx);\n    var scale = ctx.scale;\n    var imagearray = [];\n    var maxarray_x = [];\n    var maxarray_y = [];\n    var randomimage = [];\n    var y = 0;\n    var zoomscale = 0;\n    var firstx = 0;\n    var gappos_x = 0;\n    var gappos_y = 0;\n    var firsty = 0;\n\n    function trackTransforms(ctx) {\n      var svg = document.createElementNS(\"http://www.w3.org/2000/svg\", 'svg');\n      var xform = svg.createSVGMatrix();\n\n      ctx.getTransform = function () {\n        return xform;\n      };\n\n      var savedTransforms = [];\n      var save = ctx.save;\n\n      ctx.save = function () {\n        savedTransforms.push(xform.translate(0, 0));\n        return save.call(ctx);\n      };\n\n      var restore = ctx.restore;\n\n      ctx.restore = function () {\n        xform = savedTransforms.pop();\n        return restore.call(ctx);\n      };\n\n      var scale = ctx.scale;\n\n      ctx.scale = function (sx, sy) {\n        xform = xform.scaleNonUniform(sx, sy);\n        return scale.call(ctx, sx, sy);\n      };\n\n      var rotate = ctx.rotate;\n\n      ctx.rotate = function (radians) {\n        xform = xform.rotate(radians * 180 / Math.PI);\n        return rotate.call(ctx, radians);\n      };\n\n      var translate = ctx.translate;\n\n      ctx.translate = function (dx, dy) {\n        xform = xform.translate(dx, dy);\n        return translate.call(ctx, dx, dy);\n      };\n\n      var transform = ctx.transform;\n\n      ctx.transform = function (a, b, c, d, e, f) {\n        var m2 = svg.createSVGMatrix();\n        m2.a = a;\n        m2.b = b;\n        m2.c = c;\n        m2.d = d;\n        m2.e = e;\n        m2.f = f;\n        xform = xform.multiply(m2);\n        return transform.call(ctx, a, b, c, d, e, f);\n      };\n\n      var setTransform = ctx.setTransform;\n\n      ctx.setTransform = function (a, b, c, d, e, f) {\n        xform.a = a;\n        xform.b = b;\n        xform.c = c;\n        xform.d = d;\n        xform.e = e;\n        xform.f = f;\n        return setTransform.call(ctx, a, b, c, d, e, f);\n      };\n\n      var pt = svg.createSVGPoint();\n\n      ctx.transformedPoint = function (x, y) {\n        pt.x = x;\n        pt.y = y;\n        return pt.matrixTransform(xform.inverse());\n      };\n    }\n\n    function makeRandom(min, max) {\n      var RandVal = Math.floor(Math.random() * (max - min + 1)) + min;\n      return RandVal;\n    }\n\n    function redraw(texttowrite) {\n      // Clear the entire canvas\n      var p1 = ctx.transformedPoint(0, 0);\n      var p2 = ctx.transformedPoint(canvas.width, canvas.height);\n      ctx.clearRect(p1.x, p1.y, p2.x - p1.x, p2.y - p1.y); // Alternatively:\n      // ctx.save();\n      // ctx.setTransform(1,0,0,1,0,0);\n      // ctx.clearRect(0,0,canvas.width,canvas.height);\n      // ctx.restore();\n\n      ctx.font = '70px Calibri';\n      ctx.fillText(texttowrite, 0, 70, 1000);\n      var List = new Array();\n\n      if (first) {\n        for (var i = 0; i < 1000; i++) {\n          for (var j = 0; j < 1000; j++) {\n            if (ctx.getImageData(i, j, 1, 1).data[3] == 255) {\n              //console.log(i,j);\n              var xy = new Object();\n              xy.x = i;\n              var listdata = {\n                \"x\": i,\n                \"y\": j\n              };\n              xy.y = j;\n              List.push(JSON.stringify({\n                listdata\n              }));\n              imagearray.push([i, j]);\n              maxarray_x.push(i);\n              maxarray_y.push(j);\n            }\n          }\n        }\n\n        console.log(List);\n        postXY(List);\n        first = false;\n      }\n    }\n\n    redraw(text.text);\n    redraw(\"세팅 완료\");\n  }\n\n  componentDidMount() {\n    const {\n      getData,\n      getText\n    } = this.props;\n    getText();\n    getData(); //console.log(this.props);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Setting, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nContainer.propTypes = {\n  data: PropTypes.array,\n  text: PropTypes.object,\n  getText: PropTypes.func.isRequired,\n  getData: PropTypes.func.isRequired,\n  postXY: PropTypes.func.isRequired\n};\nexport default Container;","map":{"version":3,"sources":["C:/Users/devgu/sohee/sohee/frontend/src/components/Setting/container.js"],"names":["React","Component","PropTypes","Setting","test1","Container","state","loading","loading2","idx","page","maxpage","componentWillReceiveProps","nextProps","data","props","postXY","text","console","log","draw","canvas","document","getElementsByTagName","width","body","clientWidth","height","window","innerHeight","image","Array","i","length","Image","src","timerId","first","ctx","getContext","trackTransforms","scale","imagearray","maxarray_x","maxarray_y","randomimage","y","zoomscale","firstx","gappos_x","gappos_y","firsty","svg","createElementNS","xform","createSVGMatrix","getTransform","savedTransforms","save","push","translate","call","restore","pop","sx","sy","scaleNonUniform","rotate","radians","Math","PI","dx","dy","transform","a","b","c","d","e","f","m2","multiply","setTransform","pt","createSVGPoint","transformedPoint","x","matrixTransform","inverse","makeRandom","min","max","RandVal","floor","random","redraw","texttowrite","p1","p2","clearRect","font","fillText","List","j","getImageData","xy","Object","listdata","JSON","stringify","componentDidMount","getData","getText","render","propTypes","array","object","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Setting from \"./presenter\";\r\nimport test1 from \"./test_1.jpg\";\r\nclass Container extends Component {\r\n\r\n  state = {\r\n    loading: true,\r\n    loading2: true,\r\n    idx : 1,\r\n    page : [1], \r\n    maxpage : 0,\r\n  };\r\n  static propTypes = {\r\n    data: PropTypes.array,\r\n    text : PropTypes.object,\r\n    getText: PropTypes.func.isRequired,\r\n    getData: PropTypes.func.isRequired,\r\n    postXY: PropTypes.func.isRequired,\r\n  };\r\n  \r\n  draw(data,text) {\r\n    const {postXY} = this.props;\r\n    var canvas = document.getElementsByTagName('canvas')[0];\r\n          canvas.width = document.body.clientWidth ; canvas.height = window.innerHeight;\r\n          var image = new Array()\r\n          for (var i = 0; i < data.length; i++) {\r\n              image[i] = new Image()\r\n              image[i].src = data[i][\"image\"]\r\n          }\r\n          console.log(image);\r\n          var timerId = \"\";\r\n\r\n            var first = true;\r\n            \r\n            \r\n            var ctx = canvas.getContext('2d');\r\n            trackTransforms(ctx);\r\n                var scale = ctx.scale;\r\n                var imagearray = [];\r\n                var maxarray_x = [];\r\n                var maxarray_y = [];\r\n                var randomimage = [];\r\n                var y = 0;\r\n                var zoomscale = 0;\r\n                var firstx = 0;\r\n                var gappos_x  = 0;\r\n                var gappos_y = 0;\r\n                var firsty = 0;\r\n                function trackTransforms(ctx){\r\n                  var svg = document.createElementNS(\"http://www.w3.org/2000/svg\",'svg');\r\n                  var xform = svg.createSVGMatrix();\r\n                  ctx.getTransform = function(){ return xform; };\r\n                  \r\n                  var savedTransforms = [];\r\n                  var save = ctx.save;\r\n                  ctx.save = function(){\r\n                    savedTransforms.push(xform.translate(0,0));\r\n                    return save.call(ctx);\r\n                  };\r\n                  var restore = ctx.restore;\r\n                  ctx.restore = function(){\r\n                    xform = savedTransforms.pop();\r\n                    return restore.call(ctx);\r\n                  };\r\n              \r\n                  var scale = ctx.scale;\r\n                  ctx.scale = function(sx,sy){\r\n                    xform = xform.scaleNonUniform(sx,sy);\r\n                    return scale.call(ctx,sx,sy);\r\n                  };\r\n                  var rotate = ctx.rotate;\r\n                  ctx.rotate = function(radians){\r\n                    xform = xform.rotate(radians*180/Math.PI);\r\n                    return rotate.call(ctx,radians);\r\n                  };\r\n                  var translate = ctx.translate;\r\n                  ctx.translate = function(dx,dy){\r\n                    xform = xform.translate(dx,dy);\r\n                    return translate.call(ctx,dx,dy);\r\n                  };\r\n                  var transform = ctx.transform;\r\n                  ctx.transform = function(a,b,c,d,e,f){\r\n                    var m2 = svg.createSVGMatrix();\r\n                    m2.a=a; m2.b=b; m2.c=c; m2.d=d; m2.e=e; m2.f=f;\r\n                    xform = xform.multiply(m2);\r\n                    return transform.call(ctx,a,b,c,d,e,f);\r\n                  };\r\n                  var setTransform = ctx.setTransform;\r\n                  ctx.setTransform = function(a,b,c,d,e,f){\r\n                    xform.a = a;\r\n                    xform.b = b;\r\n                    xform.c = c;\r\n                    xform.d = d;\r\n                    xform.e = e;\r\n                    xform.f = f;\r\n                    return setTransform.call(ctx,a,b,c,d,e,f);\r\n                  };\r\n                  var pt  = svg.createSVGPoint();\r\n                  ctx.transformedPoint = function(x,y){\r\n                    pt.x=x; pt.y=y;\r\n                    return pt.matrixTransform(xform.inverse());\r\n                  }\r\n                }\r\n                function makeRandom(min, max){\r\n                  var RandVal = Math.floor(Math.random()*(max-min+1)) + min;\r\n                  return RandVal;\r\n              }\r\n          function redraw(texttowrite){\r\n            // Clear the entire canvas\r\n            var p1 = ctx.transformedPoint(0,0);\r\n            var p2 = ctx.transformedPoint(canvas.width,canvas.height);\r\n                  \r\n            ctx.clearRect(p1.x,p1.y,p2.x-p1.x,p2.y-p1.y);\r\n                  \r\n            // Alternatively:\r\n            // ctx.save();\r\n            // ctx.setTransform(1,0,0,1,0,0);\r\n            // ctx.clearRect(0,0,canvas.width,canvas.height);\r\n            // ctx.restore();\r\n                      ctx.font= '70px Calibri';\r\n                      ctx.fillText(texttowrite,0,70,1000);\r\n                      var List = new Array();\r\n                      if(first){\r\n                        for(var i=0;i<1000;i++){\r\n                          for(var j=0;j<1000;j++){\r\n                              if(ctx.getImageData(i,j,1,1).data[3]==255){\r\n                                  //console.log(i,j);\r\n                                  var xy = new Object() ;\r\n                                  xy.x = i;\r\n                                  var listdata =\r\n                                  {\r\n                                    \"x\" : i,\r\n                                    \"y\" : j\r\n                                  }\r\n                                  xy.y = j;\r\n                                 \r\n                                  List.push(JSON.stringify({\r\n                                    listdata\r\n                                  }));\r\n                                  imagearray.push([i,j]);\r\n                                  maxarray_x.push(i);\r\n                                  maxarray_y.push(j);\r\n                                  \r\n                              }           \r\n                          }\r\n                        }\r\n                        console.log(List);\r\n                        postXY(List);\r\n                        first = false;\r\n                      }\r\n                      \r\n                      \r\n                    }\r\n              redraw(text.text); \r\n              redraw(\"세팅 완료\");     \r\n          }\r\n\r\n    componentWillReceiveProps = nextProps => {\r\n      const { data } = this.props;\r\n      const {postXY} = this.props;\r\n      if ( nextProps.data && nextProps.text) {\t\r\n          console.log(nextProps.data);\r\n          this.draw(nextProps.data,nextProps.text);\r\n      }\r\n    };\r\n  \r\n\r\n  componentDidMount() {\r\n    const { getData,getText } = this.props;\r\n    getText();\r\n    getData();\r\n    //console.log(this.props);\r\n    \r\n};\r\n  render() {\r\n    \r\n    return (\r\n      <Setting/>\r\n      \r\n    );\r\n    \r\n  }\r\n}\r\n\r\nexport default Container;"]},"metadata":{},"sourceType":"module"}